const express = require("express");
const router = express.Router();
const mongoose = require('mongoose');
const Voucher = require("../models/Voucher");

// L·∫•y danh s√°ch voucher
router.get("/", async (req, res) => {
  try {
    const vouchers = await Voucher.find();
    res.json(vouchers);
  } catch (error) {
    res.status(500).json({ error: "L·ªói server" });
  }
});

// Ki·ªÉm tra m√£ voucher
// ƒê·ªãnh nghƒ©a route cho API /vouchers/validate
router.post('/validate', async (req, res) => {
  try {
    const { code, totalPrice } = req.body;

    if (!code) {
      return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p m√£ gi·∫£m gi√°." });
    }

    const voucher = await Voucher.findOne({ code });  // S·ª≠ d·ª•ng Voucher thay v√¨ VoucherModel
    if (!voucher) {
      return res.status(404).json({ message: "M√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá." });
    }

    const now = new Date();
    if (now < voucher.startDate) {
      return res.status(400).json({ message: "M√£ gi·∫£m gi√° ch∆∞a c√≥ hi·ªáu l·ª±c." });
    }
    if (now > voucher.endDate) {
      return res.status(400).json({ message: "M√£ gi·∫£m gi√° ƒë√£ h·∫øt h·∫°n." });
    }

    if (totalPrice < voucher.minOrderValue) {
      return res.status(400).json({
        message: `ƒê∆°n h√†ng ph·∫£i ƒë·∫°t t·ªëi thi·ªÉu ${voucher.minOrderValue.toLocaleString()} VNƒê ƒë·ªÉ √°p d·ª•ng m√£ n√†y.`
      });
    }

    return res.json({ message: "Voucher h·ª£p l·ªá!", discount: voucher.discount });

  } catch (error) {
    console.error("L·ªói x·∫£y ra khi ki·ªÉm tra voucher:", error);  // In l·ªói chi ti·∫øt
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
});



// Th√™m m·ªõi voucher
router.post("/", async (req, res) => {
  console.log("Received POST /vouchers", req.body);
  const { code, discount, minOrderValue, startDate, endDate } = req.body;

  if (!code || !discount || !minOrderValue || !startDate || !endDate) {
      return res.status(400).json({ error: "Thi·∫øu th√¥ng tin voucher" });
  }

  try {
      const newVoucher = new Voucher({ code, discount, minOrderValue, startDate, endDate });
      await newVoucher.save();
      res.status(201).json(newVoucher);
  } catch (error) {
      console.error("Error adding voucher:", error);
      res.status(500).json({ error: "Kh√¥ng th·ªÉ th√™m voucher" });
  }
});

router.delete('/vouchers/:id', async (req, res) => {
  try {
      const result = await Voucher.findByIdAndDelete(req.params.id);
      if (!result) {
          return res.status(404).json({ message: 'Voucher kh√¥ng t·ªìn t·∫°i' });
      }
      res.json({ message: 'Voucher ƒë√£ ƒë∆∞·ª£c x√≥a' });
  } catch (error) {
      res.status(500).json({ message: 'L·ªói server', error });
  }
});

// ‚úÖ API C·∫¨P NH·∫¨T VOUCHER
router.put("/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const updateData = req.body;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ message: "ID kh√¥ng h·ª£p l·ªá" });
    }

    const updatedVoucher = await Voucher.findByIdAndUpdate(id, updateData, { new: true });

    if (!updatedVoucher) {
      return res.status(404).json({ message: "Voucher kh√¥ng t·ªìn t·∫°i" });
    }

    res.status(200).json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng", updatedVoucher });
  } catch (error) {
    console.error("üî• L·ªói c·∫≠p nh·∫≠t voucher:", error);
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
});

module.exports = router;
