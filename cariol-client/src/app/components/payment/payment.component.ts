import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { CommonModule } from '@angular/common';
import { ActivatedRoute } from '@angular/router';
import { HttpClient } from '@angular/common/http';
import { VoucherService } from '../../services/voucher.service';
import { AuthService } from '../../services/auth.service';

interface OrderState {
  product: any;
  quantity: number;
  color: string;
  discountCode: string;
  discountRate: number;
  discountAmount: number;
  totalPrice: number;
  totalPayment: number;
  orderInfo: {
    fullName: string;
    email?: string;
    phone: string;
    address: string;
    province: string;
    district: string;
    ward: string;
  };
}

@Component({
  selector: 'app-payment',
  standalone: false,
  templateUrl: './payment.component.html',
  styleUrls: ['./payment.component.css']
})
export class PaymentComponent {
  product: any;
  quantity: number = 1;
  selectedColor: string = '';
  discountCode: string = '';
  discountRate: number = 0;
  discountAmount: number = 0;
  shippingFee: number = 0;
  total: number = 0;
  totalPayment: number = 0;
  expressShipping: boolean = true;
  paymentMethod: string = 'COD';
  orderInfo: any = {};
  orderPopupVisible: boolean = false;

  constructor(private router: Router, private http: HttpClient, private voucherService: VoucherService) {
    const userId = localStorage.getItem('user_id');
    console.log("üü¢ User ID t·ª´ localStorage:", userId);

    const navigation = this.router.getCurrentNavigation();
    const state = navigation?.extras.state as OrderState;

    if (state) {
      this.product = state.product;
      this.quantity = state.quantity || 1;
      this.selectedColor = state.color || 'Kh√¥ng x√°c ƒë·ªãnh';
      this.discountCode = state.discountCode || '';
      this.total = state.totalPrice || 0;
      // Nh·∫≠n th√¥ng tin ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß t·ª´ Order
      this.orderInfo = {
        fullName: state.orderInfo.fullName || '',
        email: state.orderInfo.email || '',
        phone: state.orderInfo.phone || '',
        address: this.formatAddress(state.orderInfo) // G·ªçi h√†m format ƒë·ªãa ch·ªâ
      };
      localStorage.setItem('product', JSON.stringify(this.product));
    } else {
      const savedProduct = localStorage.getItem('product');
      if (savedProduct) {
        this.product = JSON.parse(savedProduct);
      }
    }
  }
  ngOnInit(): void {
    this.updateShippingFee();  // G·ªçi h√†m khi component ƒë∆∞·ª£c kh·ªüi t·∫°o
  }
  formatAddress(orderInfo: any): string {
    let addressParts = [
      orderInfo.address,
      orderInfo.ward,
      orderInfo.district,
      orderInfo.province
    ];
    return addressParts.filter(part => part && part.trim() !== '').join(', ');
  }

  updateShippingFee() {
    this.shippingFee = this.expressShipping ? 20000 : 0;
    this.updateTotal();
  }

  updateTotal() {
    this.totalPayment = this.total - this.discountAmount + this.shippingFee;
    if (this.totalPayment < 0) {
      this.totalPayment = 0; // ƒê·∫£m b·∫£o kh√¥ng c√≥ gi√° √¢m
    }
  }

  goToCart() {
    this.router.navigate(['/cart']);
  }

  completeOrder() {
    console.log("Product khi thanh to√°n:", this.product);
    console.log("Order Info:", this.orderInfo);
  
    // Ki·ªÉm tra n·∫øu s·∫£n ph·∫©m kh√¥ng c√≥ d·ªØ li·ªáu
    if (!this.product || !this.product._id) {
      console.error("L·ªói: Kh√¥ng t√¨m th·∫•y th√¥ng tin s·∫£n ph·∫©m!");
      alert("L·ªói: Kh√¥ng t√¨m th·∫•y th√¥ng tin s·∫£n ph·∫©m!");
      return;
    }
  
    // Ki·ªÉm tra th√¥ng tin ƒë∆°n h√†ng h·ª£p l·ªá
    if (!this.orderInfo.fullName || !this.orderInfo.phone || !this.orderInfo.address) {
      alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin nh·∫≠n h√†ng!");
      return;
    }
  
    // T·∫°o d·ªØ li·ªáu ƒë∆°n h√†ng (kh√¥ng c·∫ßn user_id)
    const orderData = {
      user: {
        name: this.orderInfo.fullName,  // Kh√¥ng c·∫ßn user_id, ch·ªâ l·∫•y name v√† email
        email: this.orderInfo.email || '',
      },
      items: [{
        product_id: this.product._id,  // ƒê·∫£m b·∫£o s·ª≠ d·ª•ng _id ƒë√∫ng c·ªßa s·∫£n ph·∫©m
        name: this.product.name || 'Kh√¥ng c√≥ t√™n',  // N·∫øu kh√¥ng c√≥ t√™n th√¨ m·∫∑c ƒë·ªãnh 'Kh√¥ng c√≥ t√™n'
        price: this.product.price || 0,  // N·∫øu kh√¥ng c√≥ gi√° th√¨ m·∫∑c ƒë·ªãnh 0
        quantity: this.quantity || 1,  // N·∫øu kh√¥ng c√≥ s·ªë l∆∞·ª£ng th√¨ m·∫∑c ƒë·ªãnh 1
        color: this.selectedColor,  // M√†u s·∫Øc c·ªßa s·∫£n ph·∫©m
      }],
      total_price: this.totalPayment,  // S·ª≠ d·ª•ng totalPayment ƒë√£ t√≠nh to√°n
      status: 'pending',  // M·∫∑c ƒë·ªãnh l√† "pending"
      shipping_address: this.orderInfo.address,  // ƒê·ªãa ch·ªâ nh·∫≠n h√†ng
      phone: this.orderInfo.phone,  // S·ªë ƒëi·ªán tho·∫°i c·ªßa kh√°ch h√†ng
      payment_method: this.paymentMethod,  // Ph∆∞∆°ng th·ª©c thanh to√°n (COD, chuy·ªÉn kho·∫£n...)
      note: '',  // N·∫øu c√≥ ghi ch√∫ th√™m, b·∫°n c√≥ th·ªÉ th√™m v√†o
      order_date: new Date()  // Th·ªùi gian ƒë·∫∑t h√†ng
    };
  
    console.log("üì§ D·ªØ li·ªáu g·ª≠i l√™n server:", orderData); // Log d·ªØ li·ªáu g·ª≠i ƒëi ƒë·ªÉ ki·ªÉm tra
  
    // Ki·ªÉm tra n·∫øu d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
    if (!orderData.items.length || !orderData.shipping_address || !orderData.phone) {
      alert("D·ªØ li·ªáu ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá!");
      return;
    }
  
    // G·ª≠i ƒë∆°n h√†ng l√™n server
    this.http.post('http://localhost:3002/orders', orderData).subscribe(
      (response) => {
        alert(`ƒê·∫∑t h√†ng th√†nh c√¥ng! T·ªïng ti·ªÅn: ${this.totalPayment.toLocaleString()} VND`);
        this.router.navigate(['/']);  // Chuy·ªÉn v·ªÅ trang ch·ªß sau khi ƒë·∫∑t h√†ng
      },
      (error) => {
        alert("L·ªói khi l∆∞u ƒë∆°n h√†ng: " + error.message);
        console.error("L·ªói khi g·ª≠i ƒë∆°n h√†ng:", error);
      }
    );
  }
  
  closePopup() {
    this.orderPopupVisible = false;  // ƒê√≥ng popup x√°c nh·∫≠n
    this.router.navigate(['/']);  // Quay v·ªÅ trang ch·ªß
  }
}  